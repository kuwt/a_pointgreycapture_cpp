// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imagepack.proto

#ifndef PROTOBUF_INCLUDED_imagepack_2eproto
#define PROTOBUF_INCLUDED_imagepack_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_imagepack_2eproto 

namespace protobuf_imagepack_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_imagepack_2eproto
class imagepack;
class imagepackDefaultTypeInternal;
extern imagepackDefaultTypeInternal _imagepack_default_instance_;
class imagepack_Mat;
class imagepack_MatDefaultTypeInternal;
extern imagepack_MatDefaultTypeInternal _imagepack_Mat_default_instance_;
namespace google {
namespace protobuf {
template<> ::imagepack* Arena::CreateMaybeMessage<::imagepack>(Arena*);
template<> ::imagepack_Mat* Arena::CreateMaybeMessage<::imagepack_Mat>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class imagepack_Mat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imagepack.Mat) */ {
 public:
  imagepack_Mat();
  virtual ~imagepack_Mat();

  imagepack_Mat(const imagepack_Mat& from);

  inline imagepack_Mat& operator=(const imagepack_Mat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  imagepack_Mat(imagepack_Mat&& from) noexcept
    : imagepack_Mat() {
    *this = ::std::move(from);
  }

  inline imagepack_Mat& operator=(imagepack_Mat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const imagepack_Mat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imagepack_Mat* internal_default_instance() {
    return reinterpret_cast<const imagepack_Mat*>(
               &_imagepack_Mat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(imagepack_Mat* other);
  friend void swap(imagepack_Mat& a, imagepack_Mat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline imagepack_Mat* New() const final {
    return CreateMaybeMessage<imagepack_Mat>(NULL);
  }

  imagepack_Mat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<imagepack_Mat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const imagepack_Mat& from);
  void MergeFrom(const imagepack_Mat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imagepack_Mat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image_data = 3;
  void clear_image_data();
  static const int kImageDataFieldNumber = 3;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  #if LANG_CXX11
  void set_image_data(::std::string&& value);
  #endif
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // uint32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:imagepack.Mat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_imagepack_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class imagepack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:imagepack) */ {
 public:
  imagepack();
  virtual ~imagepack();

  imagepack(const imagepack& from);

  inline imagepack& operator=(const imagepack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  imagepack(imagepack&& from) noexcept
    : imagepack() {
    *this = ::std::move(from);
  }

  inline imagepack& operator=(imagepack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const imagepack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imagepack* internal_default_instance() {
    return reinterpret_cast<const imagepack*>(
               &_imagepack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(imagepack* other);
  friend void swap(imagepack& a, imagepack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline imagepack* New() const final {
    return CreateMaybeMessage<imagepack>(NULL);
  }

  imagepack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<imagepack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const imagepack& from);
  void MergeFrom(const imagepack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imagepack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef imagepack_Mat Mat;

  // accessors -------------------------------------------------------

  // repeated .imagepack.Mat imgs = 1;
  int imgs_size() const;
  void clear_imgs();
  static const int kImgsFieldNumber = 1;
  ::imagepack_Mat* mutable_imgs(int index);
  ::google::protobuf::RepeatedPtrField< ::imagepack_Mat >*
      mutable_imgs();
  const ::imagepack_Mat& imgs(int index) const;
  ::imagepack_Mat* add_imgs();
  const ::google::protobuf::RepeatedPtrField< ::imagepack_Mat >&
      imgs() const;

  // repeated uint32 x = 2;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::uint32 x(int index) const;
  void set_x(int index, ::google::protobuf::uint32 value);
  void add_x(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      x() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_x();

  // @@protoc_insertion_point(class_scope:imagepack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::imagepack_Mat > imgs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > x_;
  mutable int _x_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_imagepack_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// imagepack_Mat

// uint32 width = 1;
inline void imagepack_Mat::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 imagepack_Mat::width() const {
  // @@protoc_insertion_point(field_get:imagepack.Mat.width)
  return width_;
}
inline void imagepack_Mat::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:imagepack.Mat.width)
}

// uint32 height = 2;
inline void imagepack_Mat::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 imagepack_Mat::height() const {
  // @@protoc_insertion_point(field_get:imagepack.Mat.height)
  return height_;
}
inline void imagepack_Mat::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:imagepack.Mat.height)
}

// bytes image_data = 3;
inline void imagepack_Mat::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& imagepack_Mat::image_data() const {
  // @@protoc_insertion_point(field_get:imagepack.Mat.image_data)
  return image_data_.GetNoArena();
}
inline void imagepack_Mat::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:imagepack.Mat.image_data)
}
#if LANG_CXX11
inline void imagepack_Mat::set_image_data(::std::string&& value) {
  
  image_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:imagepack.Mat.image_data)
}
#endif
inline void imagepack_Mat::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:imagepack.Mat.image_data)
}
inline void imagepack_Mat::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:imagepack.Mat.image_data)
}
inline ::std::string* imagepack_Mat::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:imagepack.Mat.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* imagepack_Mat::release_image_data() {
  // @@protoc_insertion_point(field_release:imagepack.Mat.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void imagepack_Mat::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:imagepack.Mat.image_data)
}

// -------------------------------------------------------------------

// imagepack

// repeated .imagepack.Mat imgs = 1;
inline int imagepack::imgs_size() const {
  return imgs_.size();
}
inline void imagepack::clear_imgs() {
  imgs_.Clear();
}
inline ::imagepack_Mat* imagepack::mutable_imgs(int index) {
  // @@protoc_insertion_point(field_mutable:imagepack.imgs)
  return imgs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::imagepack_Mat >*
imagepack::mutable_imgs() {
  // @@protoc_insertion_point(field_mutable_list:imagepack.imgs)
  return &imgs_;
}
inline const ::imagepack_Mat& imagepack::imgs(int index) const {
  // @@protoc_insertion_point(field_get:imagepack.imgs)
  return imgs_.Get(index);
}
inline ::imagepack_Mat* imagepack::add_imgs() {
  // @@protoc_insertion_point(field_add:imagepack.imgs)
  return imgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::imagepack_Mat >&
imagepack::imgs() const {
  // @@protoc_insertion_point(field_list:imagepack.imgs)
  return imgs_;
}

// repeated uint32 x = 2;
inline int imagepack::x_size() const {
  return x_.size();
}
inline void imagepack::clear_x() {
  x_.Clear();
}
inline ::google::protobuf::uint32 imagepack::x(int index) const {
  // @@protoc_insertion_point(field_get:imagepack.x)
  return x_.Get(index);
}
inline void imagepack::set_x(int index, ::google::protobuf::uint32 value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:imagepack.x)
}
inline void imagepack::add_x(::google::protobuf::uint32 value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:imagepack.x)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
imagepack::x() const {
  // @@protoc_insertion_point(field_list:imagepack.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
imagepack::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:imagepack.x)
  return &x_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_imagepack_2eproto
